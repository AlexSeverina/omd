# Guido van Rossum <guido@python.org>
import random


def step_3_1_in_bar(num_of_coins, min_number_of_glasses):
    """
    Final part of the story where it is chosen how much will duck drink and how bad she
    will feel tomorrow.

    :param num_of_coins: Number of coins that duck has and can spend on whiskey.
    :param min_number_of_glasses: Minimum number of glasses that duck needs to drink to feel well.
    """
    print('–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–∏—Å–∫–∏ ü•É —Å–µ–≥–æ–¥–Ω—è –≤–º–µ—Å—Ç–∏—Ç —É—Ç—è—á—å–µ —Ç–µ–ª—å—Ü–µ? ü§î\n'
          f'1 —Å—Ç–∞–∫–∞–Ω = 1 –º–æ–Ω–µ—Ç–∫–∞. –£ —É—Ç–∫–∏ {num_of_coins} –º–æ–Ω–µ—Ç–æ–∫')
    num_of_glasses_options = [str(x) for x in range(min_number_of_glasses,
                                                    num_of_coins + 1)]
    num_of_glasses = int(force_choose_option(num_of_glasses_options))

    if num_of_glasses == num_of_coins:
        print('–£—Ç–∫–∞ –ø—Ä–æ–ø–∏–ª–∞ –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∏ –≤—Å—é —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –∂–∏–ª–∞ –Ω–∞ –ø–æ–¥–ª–∞–ø–Ω–æ–º –∫–æ—Ä–º–µ. \n'
              '–ù–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—á–µ—Ä–∞: ')

    if num_of_glasses > 4:
        print('–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –Ω–∞–ø–∏–ª–∞—Å—å –¥–æ –±–µ—Å–ø–∞–º—è—Ç—Å—Ç–≤–∞. \n'
              '–û–Ω–∞ –Ω–µ –ø–æ–º–Ω–∏–ª–∞, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–µ—á–µ—Ä, –Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å \n'
              '–≤–æ –≤—Å—é —Å—Ç–µ–Ω—É –µ–µ –¥–æ–º–∞ –±—ã–ª–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –±–æ–ª—å—à–∞—è –±—É–ª–∫–∞. ')
    else:
        print('–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ–ª–∞ –≤–µ—á–µ—Ä: '
              '–æ–Ω–∞ —à—É—Ç–∏–ª–∞, —Å–º–µ—è–ª–∞—Å—å –∏ –º–Ω–æ–≥–æ —Ç–∞–Ω—Ü–µ–≤–∞–ª–∞. \n'
              '–ú–∞–ª—è—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –µ–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–∏–≥–æ–¥–∏–ª–∏—Å—å. \n'
              '–ö —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü–µ –æ–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—â–µ –º–æ–Ω–µ—Ç–æ–∫ –∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏–¥–µ—Ç –≤ –±–∞—Ä. ')


def step3_cold_in_bar(num_of_coins, min_number_of_glasses):
    """
    Part of the story where duck gets wet and grumpy.

    :param num_of_coins: Number of coins that duck has.
    :param min_number_of_glasses: Minimum number of glasses that duck needs to drink to feel well.
    """
    min_number_of_glasses += 2
    print('–ü—Ä–æ–º–æ–∫—à–∞—è, –Ω–æ —É–ø–æ—Ä–Ω–∞—è, —É—Ç–∫–∞ —Ç–∞–∫–∏ –≤–æ—à–ª–∞ –≤ –±–∞—Ä. \n'
          '–ï–π –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –≥–æ—Ä—è—á–∏—Ç–µ–ª—å–Ω–æ–µ. ')
    step_3_1_in_bar(num_of_coins, min_number_of_glasses)


def step2_umbrella(num_of_coins, min_number_of_glasses):
    """
    Part of the story where it rains but lucky duck has an umbrella.

    :param num_of_coins: Number of coins that duck has.
    :param min_number_of_glasses: Minimum number of glasses that duck needs to drink to feel well.
    """
    print('–°–∫–æ—Ä–æ –Ω–∞ —É–ª–∏—Ü–µ –ø–æ—à–µ–ª –¥–æ–∂–¥—å üåß –∏ —É—Ç–∫–µ –ø—Ä–∏–≥–æ–¥–∏–ª—Å—è –µ–µ –∑–æ–Ω—Ç–∏–∫.')

    num_of_found_coins = round(random.random() * 3)
    num_of_coins += num_of_found_coins
    if num_of_found_coins:
        print(f'–î–æ–≤–æ–ª—å–Ω–æ —à–ª–µ–ø–∞—è –ø–æ –ª—É–∂–∞–º, —É—Ç–∫–∞ –¥–∞–∂–µ –Ω–∞—à–ª–∞ –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ: {num_of_found_coins}.')

    print('–°–≤–µ—Ä–∫–∞—è —Å—É—Ö–∏–º–∏ –ø–µ—Ä—ã—à–∫–∞–º–∏ –∏ –Ω–µ–∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–π –ø—Ä–∏—á–µ—Å–∫–æ–π, '
          '—É—Ç–∫–∞ –≤–æ—à–ª–∞ –≤ –±–∞—Ä.')
    step_3_1_in_bar(num_of_coins, min_number_of_glasses)


def step2_no_umbrella(num_of_coins, min_number_of_glasses):
    """
    Part of the story where duck decides whether the rain starts and
    duck decides if the bar is really worth it.

    :param num_of_coins: Number of coins that duck has.
    :param min_number_of_glasses: Minimum number of glasses that duck needs to drink to feel well.
    """
    print('–ù–µ –ø—Ä–æ—à–ª–∞ —É—Ç–∫–∞ –∏ –¥–≤—É—Ö –∫–≤–∞—Ä—Ç–∞–ª–æ–≤, –∫–∞–∫ –Ω–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å. üåß \n'
          '–£—Ç–∫–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π?')

    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    if not options[force_choose_option(options)]:
        return step3_cold_in_bar(num_of_coins, min_number_of_glasses)
    return print('–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –≥—Ä—É—Å—Ç–Ω–æ –∏ —Ç—Ä–µ–∑–≤–æ –ø—Ä–æ–≤–µ–ª–∞ –≤–µ—á–µ—Ä –¥–æ–º–∞.')


def force_choose_option(options):
    """
    Function that makes the user choose from the number of option one
    to continue the story.

    :param options: Iterable that contains options to choose from.
    """
    option = ''
    while option not in options:
        print(('–í—ã–±–µ—Ä–∏—Ç–µ: ' + '{}/' * (len(options) - 1) + '{}').format(*options))
        option = input()
    return option


def step1(num_of_coins, min_number_of_glasses):
    """
    The beginning of the story where duck decides to go to the bar.

    :param num_of_coins: Number of coins that duck has.
    :param min_number_of_glasses: Minimum number of glasses that duck needs to drink to feel well.
    """
    print('–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. '
          f'–£ –Ω–µ–µ –±—ã–ª–æ —Ü–µ–ª—ã—Ö {num_of_coins} –º–æ–Ω–µ—Ç–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–µ–ø–ª–æ—Ö–æ –ø–æ–∫—É—Ç–∏—Ç—å. '
          '–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è')

    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    if options[force_choose_option(options)]:
        return step2_umbrella(num_of_coins, min_number_of_glasses)
    return step2_no_umbrella(num_of_coins, min_number_of_glasses)


if __name__ == '__main__':
    step1(num_of_coins=5, min_number_of_glasses=0)
